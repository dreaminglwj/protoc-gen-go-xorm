package main

import (
	"flag"
	"fmt"
	"google.golang.org/protobuf/types/pluginpb"
	"html/template"
	"os"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	XormTemplate = `
// base xorm.io/xorm/convert

//FromDB implements convert.Conversion
func (x *{{ .GoIdent.GoName }}) FromDB(b []byte) error {
	key := string(b)
	value, ok := {{ .GoIdent.GoName }}_value[key]
	if ok {
		*x = {{ .GoIdent.GoName }}(value)
	}
	return nil
}

// ToDB implements convert.Conversion
func (x *{{ .GoIdent.GoName }}) ToDB() ([]byte, error) {
	return []byte(x.String()), nil
}
`
)

var xormTemplateParser = template.Must(template.New("message").Parse(XormTemplate))

func main() {
	flag.Parse()
	protogen.Options{
		ParamFunc: flag.CommandLine.Set,
	}.Run(func(plugin *protogen.Plugin) error {
		plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		for _, f := range plugin.Files {
			if !f.Generate {
				continue
			}
			if len(f.Messages) == 0 {
				continue
			}
			if !hasEnums(f.Messages) && len(f.Enums) == 0 {
				continue
			}
			filename := f.GeneratedFilenamePrefix + "_xorm.pb.go"
			file := plugin.NewGeneratedFile(filename, f.GoImportPath)
			ApplyTemplate(file, f)
		}
		return nil
	})
}

func ApplyTemplate(file *protogen.GeneratedFile, f *protogen.File) {
	file.P("// Code generated by protoc-gen-go-xorm. DO NOT EDIT!")
	file.P("// Power by lwj")
	file.P(``)
	file.P(`package ` + f.GoPackageName)
	AppendEnums(file, f.Enums)
	ApplyMessage(file, f.Messages)
}

func ApplyMessage(file *protogen.GeneratedFile, messages []*protogen.Message) {
	for _, m := range messages {
		AppendEnums(file, m.Enums)
		ApplyMessage(file, m.Messages)
	}
}

func AppendEnums(file *protogen.GeneratedFile, enums []*protogen.Enum) {
	for _, enum := range enums {
		if err := xormTemplateParser.Execute(file, enum); err != nil {
			fmt.Fprint(os.Stderr, "proto-gen-xorm error: %+v\n", err)
		}
	}
}

func hasEnums(messages []*protogen.Message) bool {
	for _, m := range messages {
		if len(m.Enums) > 0 {
			return true
		}
		if hasEnums(m.Messages) {
			return true
		}
	}
	return false
}
